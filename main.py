from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from config import TOKEN

ADMINS = [426156432]
pending_answers = {}

def start(update: Update, context):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëãüèª\n"
        "–¢—ã –ø–∏—à–µ—à—å –≤ –æ—Ç–¥–µ–ª –∑–∞–±–æ—Ç—ã –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è –ù–∞—Å—Ç–∏ Mosssart. –ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—ë –æ–±—É—á–µ–Ω–∏–µ "
        "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º.\n\n"
        "üíå C —á–µ–º –º—ã –º–æ–∂–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n\n"
        "1. –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å–∞.\n"
        "2. –ü–æ–º–æ—á—å –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å! ü´Ç"
    )
    update.message.reply_text(welcome_message)


def forward_to_admins(update, user_id, user_name):
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        if update.message.text:
            context.bot.send_message(admin_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç {user_name} (ID: {user_id}):\n{update.message.text}")
        else:
            context.bot.forward_message(admin_id, update.message.chat.id, update.message.message_id)

def handle_message(update: Update, context):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name

    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
    if user_id in ADMINS and user_id in pending_answers:
        user_id_to_reply = pending_answers[user_id]
        if update.message.text:
            context.bot.send_message(user_id_to_reply, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏: {update.message.text}")
        else:
            context.bot.forward_message(user_id_to_reply, update.message.chat.id, update.message.message_id)
        update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        del pending_answers[user_id]
    else:
        forward_to_admins(update, user_id, user_name)

def handle_callback(update: Update, context):
    query = update.callback_query
    if query.data.startswith("answer-"):
        user_id = int(query.data.split("-")[1])
        admin_name = query.from_user.first_name or "–ê–¥–º–∏–Ω"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMINS:
            if admin_id != query.from_user.id:
                context.bot.send_message(admin_id, f"{admin_name} —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
        
        pending_answers[query.from_user.id] = user_id
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

def add_admin(update: Update, context):
    admin_id = update.message.from_user.id
    if admin_id in ADMINS:
        try:
            new_admin_id = int(context.args[0])
            ADMINS.append(new_admin_id)
            update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
        except (IndexError, ValueError):
            update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addadmin <user_id>")
    else:
        update.message.reply_text("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def get_my_id(update: Update, context):
    user_id = update.message.from_user.id
    update.message.reply_text(f"–í–∞—à ID: {user_id}")

def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('addadmin', add_admin, pass_args=True))
    dp.add_handler(CommandHandler('myid', get_my_id))
    dp.add_handler(CallbackQueryHandler(handle_callback))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command | Filters.photo | Filters.video | Filters.audio | Filters.voice, handle_message))
    
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
